Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.10.0 Build 20230609_000000

Compiler options: -O3 -xHost -qopenmp -qopt-report5 -o h1_par

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/6=16.7%] omp_homework_par.c(23,1)
  -> EXTERN: (29,3) printf(const char *__restrict__, ...)
  -> EXTERN: (31,26) malloc(size_t)
  -> EXTERN: (32,26) malloc(size_t)
  -> INLINE: (33,3) fillInput(double *, double *, int) (isz = 52) (sz = 63)
    -> EXTERN: (125,3) srand(unsigned int)
    -> EXTERN: (125,9) time(time_t *)
    -> EXTERN: (127,5) rand(void)
    -> EXTERN: (131,29) rand(void)
    -> EXTERN: (132,29) rand(void)
  -> EXTERN: (35,32) malloc(size_t)
  -> EXTERN: (36,32) malloc(size_t)
  -> INLINE: (37,3) setOutputZero(double *, double *, int) (isz = 17) (sz = 28)
  -> EXTERN: (39,28) malloc(size_t)
  -> EXTERN: (40,28) malloc(size_t)
  -> INLINE: (41,3) setOutputZero(double *, double *, int) (isz = 17) (sz = 28)
  -> EXTERN: (44,23) omp_get_wtime(void)
  -> INLINE: (48,3) DFT(int, double *, double *, double *, double *, int) (isz = 177) (sz = 194)
    -> EXTERN: (90,16) omp_get_thread_num(void)
    -> EXTERN: (91,20) omp_get_num_threads(void)
    -> EXTERN: (99,28) cos(double)
    -> EXTERN: (99,66) sin(double)
    -> EXTERN: (101,36) sin(double)
    -> EXTERN: (101,67) cos(double)
  -> EXTERN: (49,16) omp_get_wtime(void)
  -> INLINE: (52,3) DFT(int, double *, double *, double *, double *, int) (isz = 177) (sz = 194)
    -> EXTERN: (90,16) omp_get_thread_num(void)
    -> EXTERN: (91,20) omp_get_num_threads(void)
    -> EXTERN: (99,28) cos(double)
    -> EXTERN: (99,66) sin(double)
    -> EXTERN: (101,36) sin(double)
    -> EXTERN: (101,67) cos(double)
  -> EXTERN: (53,17) omp_get_wtime(void)
  -> EXTERN: (60,3) printf(const char *__restrict__, ...)
  -> INLINE: (63,3) checkResults(double *, double *, double *, double *, double *, double *, int) (isz = 61) (sz = 80)
    -> EXTERN: (159,7) printf(const char *__restrict__, ...)
    -> EXTERN: (161,7) printf(const char *__restrict__, ...)
    -> EXTERN: (163,3) printf(const char *__restrict__, ...)
  -> EXTERN: (71,3) free(void *)
  -> EXTERN: (72,3) free(void *)
  -> EXTERN: (73,3) free(void *)
  -> EXTERN: (74,3) free(void *)
  -> EXTERN: (75,3) free(void *)
  -> EXTERN: (76,3) free(void *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at omp_homework_par.c(96,7) inlined into omp_homework_par.c(48,3)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful
OpenMP Construct at omp_homework_par.c(94,5) inlined into omp_homework_par.c(48,3)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful
OpenMP Construct at omp_homework_par.c(87,3) inlined into omp_homework_par.c(48,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at omp_homework_par.c(109,5) inlined into omp_homework_par.c(48,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at omp_homework_par.c(96,7) inlined into omp_homework_par.c(52,3)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful
OpenMP Construct at omp_homework_par.c(94,5) inlined into omp_homework_par.c(52,3)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful
OpenMP Construct at omp_homework_par.c(87,3) inlined into omp_homework_par.c(52,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at omp_homework_par.c(109,5) inlined into omp_homework_par.c(52,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at omp_homework_par.c(126,3) inlined into omp_homework_par.c(33,3)
   remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ omp_homework_par.c(127,5) ]
LOOP END

LOOP BEGIN at omp_homework_par.c(128,3) inlined into omp_homework_par.c(33,3)
   remark #15382: vectorization support: call to function rand(void) cannot be vectorized   [ omp_homework_par.c(131,29) ]
   remark #15382: vectorization support: call to function rand(void) cannot be vectorized   [ omp_homework_par.c(132,29) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (131:29) and call:rand(void) (132:29)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (132:29) and call:rand(void) (131:29)
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3) inlined into omp_homework_par.c(37,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3) inlined into omp_homework_par.c(37,3)
   remark #15389: vectorization support: reference xr_check[n] has unaligned access   [ omp_homework_par.c(146,5) ]
   remark #15388: vectorization support: reference xi_check[n] has aligned access   [ omp_homework_par.c(147,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.406
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 3.490 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4687
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3) inlined into omp_homework_par.c(37,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference xr_check[n] has unaligned access   [ omp_homework_par.c(146,5) ]
   remark #15389: vectorization support: reference xi_check[n] has unaligned access   [ omp_homework_par.c(147,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.600
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3) inlined into omp_homework_par.c(37,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3) inlined into omp_homework_par.c(41,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3) inlined into omp_homework_par.c(41,3)
   remark #15389: vectorization support: reference Xr_o[n] has unaligned access   [ omp_homework_par.c(146,5) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_par.c(147,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.406
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 3.490 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4687
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3) inlined into omp_homework_par.c(41,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference Xr_o[n] has unaligned access   [ omp_homework_par.c(146,5) ]
   remark #15389: vectorization support: reference Xi_o[n] has unaligned access   [ omp_homework_par.c(147,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.600
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3) inlined into omp_homework_par.c(41,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at omp_homework_par.c(156,3) inlined into omp_homework_par.c(63,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ omp_homework_par.c(159,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ omp_homework_par.c(161,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at omp_homework_par.c(93,5) inlined into omp_homework_par.c(48,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *Xr_o (99:9) and *(*Xr_o+k*8) (99:9)
   remark #15346: vector dependence: assumed FLOW dependence between *(*Xr_o+k*8) (99:9) and *Xr_o (99:9)
LOOP END

LOOP BEGIN at omp_homework_par.c(110,5) inlined into omp_homework_par.c(48,3)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ omp_homework_par.c(110,24) ]
   remark #25427: Loop Statements Reordered
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *Xi_o (113:7) and *(*Xi_o+$i1*8) (113:7)
   remark #15346: vector dependence: assumed FLOW dependence between *(*Xi_o+$i1*8) (113:7) and *Xi_o (113:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at omp_homework_par.c(110,5) inlined into omp_homework_par.c(48,3)
<Remainder>
LOOP END

LOOP BEGIN at omp_homework_par.c(93,5) inlined into omp_homework_par.c(52,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *Xr_o (99:9) and *(*Xr_o+k*8) (99:9)
   remark #15346: vector dependence: assumed FLOW dependence between *(*Xr_o+k*8) (99:9) and *Xr_o (99:9)
LOOP END

LOOP BEGIN at omp_homework_par.c(110,5) inlined into omp_homework_par.c(52,3)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ omp_homework_par.c(110,24) ]
   remark #25427: Loop Statements Reordered
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *Xi_o (113:7) and *(*Xi_o+$i1*8) (113:7)
   remark #15346: vector dependence: assumed FLOW dependence between *(*Xi_o+$i1*8) (113:7) and *Xi_o (113:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at omp_homework_par.c(110,5) inlined into omp_homework_par.c(52,3)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

omp_homework_par.c(23,1):remark #34051: REGISTER ALLOCATION : [main] omp_homework_par.c:23

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     653
            Global    :     153
            Local     :     500
        Regenerable   :     244
        Spilled       :      23
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :      20 [4.99e-04 ~ 0.0%]
            Writes    :      23 [5.73e-03 ~ 0.0%]
        Spills        :     224 bytes*
            Reads     :      63 [7.90e-03 ~ 0.0%]
            Writes    :      48 [2.23e-03 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT(int, double *, double *, double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT(int, double *, double *, double *, double *, int)) [2/6=33.3%] omp_homework_par.c(84,1)
  -> EXTERN: (90,16) omp_get_thread_num(void)
  -> EXTERN: (91,20) omp_get_num_threads(void)
  -> EXTERN: (99,28) cos(double)
  -> EXTERN: (99,66) sin(double)
  -> EXTERN: (101,36) sin(double)
  -> EXTERN: (101,67) cos(double)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at omp_homework_par.c(96,7)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful
OpenMP Construct at omp_homework_par.c(94,5)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful
OpenMP Construct at omp_homework_par.c(87,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at omp_homework_par.c(109,5)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at omp_homework_par.c(93,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between Xr_o[k] (99:9) and Xi_o[k] (101:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between Xi_o[k] (101:9) and Xr_o[k] (99:9)
LOOP END

LOOP BEGIN at omp_homework_par.c(110,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at omp_homework_par.c(110,5)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #25084: Preprocess Loopnests: Moving Out Store    [ omp_homework_par.c(110,24) ]
   remark #15389: vectorization support: reference Xr_o[$i1] has unaligned access   [ omp_homework_par.c(112,7) ]
   remark #15389: vectorization support: reference Xr_o[$i1] has unaligned access   [ omp_homework_par.c(112,7) ]
   remark #15388: vectorization support: reference Xi_o[$i1] has aligned access   [ omp_homework_par.c(113,7) ]
   remark #15388: vectorization support: reference Xi_o[$i1] has aligned access   [ omp_homework_par.c(113,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 63 
   remark #15477: vector cost: 18.250 
   remark #15478: estimated potential speedup: 3.130 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at omp_homework_par.c(110,5)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference Xr_o[$i1] has unaligned access   [ omp_homework_par.c(112,7) ]
   remark #15389: vectorization support: reference Xr_o[$i1] has unaligned access   [ omp_homework_par.c(112,7) ]
   remark #15389: vectorization support: reference Xi_o[$i1] has unaligned access   [ omp_homework_par.c(113,7) ]
   remark #15389: vectorization support: reference Xi_o[$i1] has unaligned access   [ omp_homework_par.c(113,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.316
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
LOOP END

LOOP BEGIN at omp_homework_par.c(110,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at omp_homework_par.c(110,5)
<Multiversioned v2>
   remark #25084: Preprocess Loopnests: Moving Out Store    [ omp_homework_par.c(110,24) ]
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at omp_homework_par.c(110,5)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

omp_homework_par.c(84,1):remark #34051: REGISTER ALLOCATION : [DFT] omp_homework_par.c:84

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     324
            Global    :      79
            Local     :     245
        Regenerable   :      97
        Spilled       :      12
        
    Routine stack
        Variables     :      88 bytes*
            Reads     :       9 [5.64e-01 ~ 0.6%]
            Writes    :      11 [6.76e+00 ~ 6.8%]
        Spills        :     136 bytes*
            Reads     :      35 [9.29e+00 ~ 9.3%]
            Writes    :      28 [5.89e+00 ~ 5.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: fillInput(double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (fillInput(double *, double *, int)) [3/6=50.0%] omp_homework_par.c(123,1)
  -> EXTERN: (125,3) srand(unsigned int)
  -> EXTERN: (125,9) time(time_t *)
  -> EXTERN: (127,5) rand(void)
  -> EXTERN: (131,29) rand(void)
  -> EXTERN: (132,29) rand(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at omp_homework_par.c(126,3)
   remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ omp_homework_par.c(127,5) ]
LOOP END

LOOP BEGIN at omp_homework_par.c(128,3)
   remark #15382: vectorization support: call to function rand(void) cannot be vectorized   [ omp_homework_par.c(131,29) ]
   remark #15382: vectorization support: call to function rand(void) cannot be vectorized   [ omp_homework_par.c(132,29) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (131:29) and call:rand(void) (132:29)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (132:29) and call:rand(void) (131:29)
   remark #25015: Estimate of max trip count of loop=75000
LOOP END

    Report from: Code generation optimizations [cg]

omp_homework_par.c(123,1):remark #34051: REGISTER ALLOCATION : [fillInput] omp_homework_par.c:123

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rbx rbp rsi rdi r14-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      35
            Global    :      19
            Local     :      16
        Regenerable   :       4
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: setOutputZero(double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (setOutputZero(double *, double *, int)) [4/6=66.7%] omp_homework_par.c(142,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at omp_homework_par.c(144,3)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15389: vectorization support: reference Xr_o[n] has unaligned access   [ omp_homework_par.c(146,5) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_par.c(147,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.406
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 3.490 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4687
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference Xr_o[n] has unaligned access   [ omp_homework_par.c(146,5) ]
   remark #15389: vectorization support: reference Xi_o[n] has unaligned access   [ omp_homework_par.c(147,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.600
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=75000
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=75000
LOOP END

LOOP BEGIN at omp_homework_par.c(144,3)
<Remainder, Multiversioned v2>
   remark #25015: Estimate of max trip count of loop=75000
LOOP END

    Report from: Code generation optimizations [cg]

omp_homework_par.c(142,1):remark #34051: REGISTER ALLOCATION : [setOutputZero] omp_homework_par.c:142

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8-r11 zmm0]
        
    Routine temporaries
        Total         :      53
            Global    :      36
            Local     :      17
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: checkResults(double *, double *, double *, double *, double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (checkResults(double *, double *, double *, double *, double *, double *, int)) [5/6=83.3%] omp_homework_par.c(154,1)
  -> EXTERN: (159,7) printf(const char *__restrict__, ...)
  -> EXTERN: (161,7) printf(const char *__restrict__, ...)
  -> EXTERN: (163,3) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at omp_homework_par.c(156,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ omp_homework_par.c(159,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ omp_homework_par.c(161,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25015: Estimate of max trip count of loop=75000
LOOP END

    Report from: Code generation optimizations [cg]

omp_homework_par.c(154,1):remark #34051: REGISTER ALLOCATION : [checkResults] omp_homework_par.c:154

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      52
            Global    :      14
            Local     :      38
        Regenerable   :      12
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [4.54e+00 ~ 4.5%]
            Writes    :       7 [4.54e+00 ~ 4.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: printResults(double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (printResults(double *, double *, int)) [6/6=100.0%] omp_homework_par.c(169,1)
  -> EXTERN: (172,5) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at omp_homework_par.c(171,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ omp_homework_par.c(172,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

    Report from: Code generation optimizations [cg]

omp_homework_par.c(169,1):remark #34051: REGISTER ALLOCATION : [printResults] omp_homework_par.c:169

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       4
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [4.81e+00 ~ 4.8%]
            Writes    :       5 [4.81e+00 ~ 4.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
